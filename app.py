# Created on Tuesday, March 7, 2566 BE (GMT+7) Time in Suthep, Mueang Chiang Mai District, Chiang Mai
# @author: natthanaphop.isa
# @editor: wachiranun.sir
# Last update 15/7/2024

import numpy as np
import pandas as pd
import pickle
import streamlit as st
from streamlit_option_menu import option_menu
from PIL import Image


# Loading the saved model
with open('logistic_model_frailty.pkl', 'rb') as model_file:
    loaded_model = pickle.load(model_file)

# Loading banner and button image
image = Image.open('./images/app_banner.png')
st.image(image, use_column_width ="always" )

logo = './images/slidebar_button.png'



# Creating a function for Prediction
def frailty_prediction(input_data):
    prediction = loaded_model.predict(input_data)
    pred_prop = loaded_model.predict_proba(input_data)

    if prediction[0] == 0:
        pred = '‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á "‡∏ï‡πà‡∏≥" üèÉ ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û'
    else:
        pred =  '‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á "‡∏™‡∏π‡∏á" üßëüèº‚Äçü¶Ω ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°'
    
    return pred, pred_prop

# sidebar for navigation
st.logo(logo, icon_image=logo)
with st.sidebar:
    
    selected = option_menu('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå',
                          
                          ['Frailty Classification Using Machine Learning Model'],
                          icons=['activity'],
                          default_index=0)
    
# Model using non-HDL cholestoral level
if (selected == "Frailty Classification Using Machine Learning Model"):
    
    def transform_input(AGE,SEX,STATUS,HT,DLP,BMI,waistcir,calfcir,exhaustion_choices):
        
        if SEX == '‡∏ä‡∏≤‡∏¢':
            SEX = 1
        else:
            SEX = 0
    
        if STATUS == '‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏≥‡∏û‡∏±‡∏á':
            STATUS = 1
        else:
            STATUS = 0
        
        if DLP == '‡πÉ‡∏ä‡πà':
            DLP = 1
        else:
            DLP = 0
    
        if HT == '‡πÉ‡∏ä‡πà':
            HT = 1
        else:
            HT = 0
        
        if exhaustion_choices == '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà':
            exhaustion_choices = 0
        else:
            exhaustion_choices = 1
            
            
        return [AGE,SEX,STATUS,HT,DLP,BMI,waistcir,calfcir,exhaustion_choices]
    
        
    with st.form('my_form'):
        st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
        AGE =  st.slider('‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)',60, 120)
        SEX = st.selectbox('‡πÄ‡∏û‡∏®', ['‡∏ä‡∏≤‡∏¢', '‡∏´‡∏ç‡∏¥‡∏á'])    
        STATUS = st.selectbox('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', ['‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏≥‡∏û‡∏±‡∏á', '‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ'])
        BMI =  st.slider('‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (kg/m2)',0, 80)
        waistcir =  st.slider('‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (cm)',0, 200)
        calfcir =  st.slider('‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á‡∏ô‡πà‡∏≠‡∏á (cm)',0, 80)
        st.write("‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß")
        HT = st.selectbox('‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á', ['‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà', '‡πÉ‡∏ä‡πà'])
        DLP = st.selectbox('‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á', ['‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà', '‡πÉ‡∏ä‡πà'])
        st.write("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢")
        exhaustion_choices = st.selectbox('‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?', ['‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà', '‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á (1-2 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)','‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á (3-4 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)', '‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô'])

        if st.form_submit_button('‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û'):
            
            input_tranfrom = transform_input(AGE,SEX,STATUS,HT,DLP,BMI,waistcir,calfcir,exhaustion_choices)
            new_prediction = pd.DataFrame.from_dict({1:input_tranfrom}, columns=["AGE","SEX","STATUS","HT","DLP","BMI","waistcir","calfcir","exhaustion_choices"], orient='index')
            pred, pred_prop = frailty_prediction(new_prediction)
            pred_percent = pred_prop[-1,-1]*100
            pred_percent = format(pred_percent,".2f")
            pred
            text = "‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û " + str(pred_percent) + " %"
            st.success(text, icon="üßëüèº‚Äçü¶Ω")

